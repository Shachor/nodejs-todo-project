// This app will demonstrate how to use JWT library (JSON Web Token)
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');



//=============================================================================
// BCRYPT
//=============================================================================
var password = 'passwordDuh!';

// .genSalt(rounds, callback) - Rounds is number of times it will run. Higher takes
// longer, but better. Callback returns (err, result)
// .hash(pw, salt, callback) - This is function that actually hashes password. Give
// it the password to hash, the salt generated by .genSalt() and the callback (err, result)

// bcrypt.genSalt(10, (err, salt) => {
//    bcrypt.hash(password, salt, (err, hash) => {
//       console.log(hash);
//    });
// });


// This is how we check hash against plain text password
var hashedPassword = '$2a$10$OQV3kbf9/CcOHqukurzhKue1bEO1c2A.L3MFjQ0FUo/vGb1M6BVRe';

// .compare(pw, hash, callback(err, res)) - Result is a true if matched or false if they don't
bcrypt.compare(password, hashedPassword, (err, result) => {
   console.log(result);
});



//=============================================================================
// JWT
//=============================================================================
// var data = {
//    id: 10
// };
//
// // This stores the data hash + salt in var token which will be stored in the user object
// var token = jwt.sign(data, 'thisIsASecretSalt');
// console.log(token);
//
// // This will verify the token AND teh salt, then decode the data, storing it in var decoded
// var decoded = jwt.verify(token, 'thisIsASecretSalt');
// console.log('Decoded: ', decoded);

// jwt.sign ---> takes object and signs it (creates hash and returns token value)
// jwt.verify ---> takes data and hash and makes sure ti wasn't manipulated

//=============================================================================
